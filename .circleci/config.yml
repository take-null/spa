version: 2.1

orbs: 
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-ecs: circleci/aws-ecs@2.1.0

jobs:
  build_test_backend:
    docker:
      - image: cimg/ruby:3.1.1-node
        environment:
          RAILS_ENV: test
          APP_DATABASE_HOST: 127.0.0.1
      - image: cimg/postgres:14.2

    working_directory: ~/app

    steps:
      - checkout 

      # restore gem from cache
      - restore_cache:
          keys:
            - gem-cache-v1-{{ checksum "~/app/back/Gemfile.lock" }}
            - gem-cache-v1-
          working_directory: ~/app/back

      # gem install
      - run:
          command: |
            gem install bundler:2.3.7
            bundle config set path 'vendor/bundle'
            bundle install --jobs=4 --retry=3
          working_directory: ~/app/back

      - save_cache:
          key: gem-cache-v1-{{ checksum "~/app/back/Gemfile.lock" }}
          paths:
            - ~/repo/back/vendor/bundle
          working_directory: ~/app/back

      # Database setup 
      - run:
          command: bundle exec rails db:create
          working_directory: ~/app/back
      - run:
          command: bundle exec rails db:migrate
          working_directory: ~/app/back

      - run:
          name: create directory to store test results
          command: mkdir /tmp/test-results
          working_directory: ~/app/back

      # run tests
      - run:
          name: RSpec
          command: |
            bundle exec rspec $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings) \
              || (printf "====== RETRYING...\n\n\n"; bundle exec rspec --only-failures)
          working_directory: ~/app/back

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - store_artifacts:
          path: /home/circleci/app/tmp/screenshots

  build_test_frontend:
    docker:
      - image: cimg/node:16.14.0
        environment:
          NODE_ENV: test

    working_directory: ~/app

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "~/app/front/package.json" }}
          working_directory: ~/app/front
      - run:
          name: install-packages
          command: yarn install
          working_directory: ~/app/front
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "~/app/front/package.json" }}
          working_directory: ~/app/front
      - run:
          name: test
          command: yarn test
          working_directory: ~/app/front

workflows:  
  version: 2  
  build_and_test_and_deploy:  
    jobs:  
      - build_test_backend:  
          filters:  
            branches:  
              only:  
                - main
      - build_test_frontend:
          filters:  
            branches:  
              only:   
                - main
      - aws-ecr/build-and-push-image:
          name: 'build-and-push-back'
          account-url: AWS_ECR_ACCOUNT_URL 
          repo: ${REPO_NAME_BACK}
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          path: '/mnt/c/Users/bluer/docker/spa/back'
          dockerfile: back/Dockerfile
          extra-build-args: '--build-arg RAILS_MASTER_KEY=$RAILS_MASTER_KEY'
          requires:  
            - build_test_backend
            - build_test_frontend
          filters:  
            branches:  
              only:  
                - main
      - aws-ecr/build-and-push-image:
          name: 'build-and-push-front'
          account-url: AWS_ECR_ACCOUNT_URL 
          repo: ${REPO_NAME_FRONT}
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          path: '/mnt/c/Users/bluer/docker/spa/front'
          dockerfile: front/Dockerfile
          requires:  
            - build_test_backend
            - build_test_frontend
          filters:  
            branches:  
              only:  
                - main
      - aws-ecs/deploy-service-update:
          family: ${FAMILY_NAME_BACK}
          service-name: ${SERVICE_NAME_BACK}
          cluster-name: ${CLUSTER_NAME}
          container-image-name-updates: 'container=back,image-and-tag=${AWS_ECR_ACCOUNT_URL}/${REPO_NAME_BACK}:${CIRCLE_SHA1}'
          requires:  
            - 'build-and-push-back'  
          filters:  
            branches:  
              only:  
                - main
      - aws-ecs/deploy-service-update:
          family: ${FAMILY_NAME_FRONT}
          service-name: ${SERVICE_NAME_FRONT}
          cluster-name: ${CLUSTER_NAME}
          container-image-name-updates: 'container=front,image-and-tag=${AWS_ECR_ACCOUNT_URL}/${REPO_NAME_FRONT}:${CIRCLE_SHA1}'
          requires:  
            - 'build-and-push-front'  
          filters:  
            branches:  
              only:  
                - main